stages:
  - stage: AgentSelection
    jobs:
      - job: AgentSelection
        steps:
          - task: Bash@3
            inputs:
              targetType: inline
              script: |
                # Get the current repo and job name dynamically in bash
                currentRepoName=$(echo $BUILD_REPOSITORY_NAME)
                currentJobName=$(echo $SYSTEM_TEAMPROJECT) # Use system definition name for job name
                
                # Initialize match flags
                repoMatch=false
                jobMatch=false
                
                # Print the current repo name and job names
                echo "Repo Name: $currentRepoName"
                echo "Job Name: $currentJobName"
                
                # Check if app-name.yml exists in the same directory and matches the repo
                if [ -f "path/to/app-name.yml" ]; then
                  if grep -q "$currentRepoName" path/to/app-name.yml; then
                    echo "Found match for repo: $currentRepoName"
                    repoMatch=true
                  else
                    echo "No match found for repo: $currentRepoName"
                  fi
                else
                  echo "'app-name.yml' file not found!"
                fi

                # Check if job-name.yml exists and matches the job name
                if [ -f "path/to/job-name.yml" ]; then
                  if grep -q "$currentJobName" path/to/job-name.yml; then
                    echo "Found match for job: $currentJobName"
                    jobMatch=true
                  else
                    echo "No match found for job: $currentJobName"
                  fi
                else
                  echo "'job-name.yml' file not found!"
                fi
                
                # Decide on the agent pool and set the value
                if [[ "$repoMatch" == "true" ]] && [[ "$jobMatch" == "true" ]]; then
                  echo "Using 'xx' pool"
                  echo "##vso[task.setvariable variable=agentPoolName;isOutput=true]xx"
                else
                  echo "Using 'x' pool"
                  echo "##vso[task.setvariable variable=agentPoolName;isOutput=true]x"
                fi

        outputs:
          agentPoolName: AgentSelection.agentPoolName

  - stage: Build
    dependsOn: AgentSelection
    jobs:
      - job: agentused
        pool:
          name: ${{ dependencies.AgentSelection.outputs['AgentSelection.agentPoolName'] }}
        steps:
          - task: Bash@3
            inputs:
              targetType: inline
              script: |
                echo "selected agent pool: ${{ dependencies.AgentSelection.outputs['AgentSelection.agentPoolName'] }}"
